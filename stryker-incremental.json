{
  "files": {
    "src/example/ExampleData.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 27,
              "line": 19
            },
            "start": {
              "column": 18,
              "line": 19
            }
          }
        },
        {
          "id": "0",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 20
            },
            "start": {
              "column": 67,
              "line": 18
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 66,
              "line": 22
            },
            "start": {
              "column": 30,
              "line": 22
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 43,
              "line": 22
            },
            "start": {
              "column": 40,
              "line": 22
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 64,
              "line": 22
            },
            "start": {
              "column": 55,
              "line": 22
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 66,
              "line": 23
            },
            "start": {
              "column": 30,
              "line": 23
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 43,
              "line": 23
            },
            "start": {
              "column": 40,
              "line": 23
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 64,
              "line": 23
            },
            "start": {
              "column": 55,
              "line": 23
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 74,
              "line": 26
            },
            "start": {
              "column": 5,
              "line": 26
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 45,
              "line": 27
            },
            "start": {
              "column": 30,
              "line": 27
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 69,
              "line": 28
            },
            "start": {
              "column": 27,
              "line": 28
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 53,
              "line": 30
            },
            "start": {
              "column": 5,
              "line": 30
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 78,
              "line": 31
            },
            "start": {
              "column": 33,
              "line": 31
            }
          }
        },
        {
          "id": "13",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 79,
              "line": 33
            },
            "start": {
              "column": 5,
              "line": 33
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 69,
              "line": 34
            },
            "start": {
              "column": 31,
              "line": 34
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 61,
              "line": 36
            },
            "start": {
              "column": 5,
              "line": 36
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 41
            },
            "start": {
              "column": 49,
              "line": 38
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 27,
              "line": 39
            },
            "start": {
              "column": 20,
              "line": 39
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 46
            },
            "start": {
              "column": 49,
              "line": 43
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 49
            },
            "start": {
              "column": 69,
              "line": 47
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 27,
              "line": 44
            },
            "start": {
              "column": 20,
              "line": 44
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 53
            },
            "start": {
              "column": 65,
              "line": 50
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 112
            },
            "start": {
              "column": 36,
              "line": 86
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 36,
              "line": 88
            },
            "start": {
              "column": 26,
              "line": 88
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 38,
              "line": 88
            },
            "start": {
              "column": 16,
              "line": 88
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 84
            },
            "start": {
              "column": 39,
              "line": 55
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 6,
              "line": 89
            },
            "start": {
              "column": 28,
              "line": 87
            }
          }
        },
        {
          "id": "27",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 6,
              "line": 92
            },
            "start": {
              "column": 25,
              "line": 90
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 55,
              "line": 91
            },
            "start": {
              "column": 32,
              "line": 91
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 6,
              "line": 108
            },
            "start": {
              "column": 39,
              "line": 93
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "ConditionalExpression",
          "replacement": "case '1':",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 14,
              "line": 97
            },
            "start": {
              "column": 13,
              "line": 95
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 21,
              "line": 95
            },
            "start": {
              "column": 18,
              "line": 95
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 14,
              "line": 97
            },
            "start": {
              "column": 23,
              "line": 95
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "ConditionalExpression",
          "replacement": "case '2':",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 14,
              "line": 100
            },
            "start": {
              "column": 13,
              "line": 98
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 21,
              "line": 98
            },
            "start": {
              "column": 18,
              "line": 98
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 14,
              "line": 100
            },
            "start": {
              "column": 23,
              "line": 98
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "ConditionalExpression",
          "replacement": "default:",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 14,
              "line": 106
            },
            "start": {
              "column": 13,
              "line": 101
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 14,
              "line": 106
            },
            "start": {
              "column": 22,
              "line": 101
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 64,
              "line": 103
            },
            "start": {
              "column": 21,
              "line": 103
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 6,
              "line": 111
            },
            "start": {
              "column": 21,
              "line": 109
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 34,
              "line": 110
            },
            "start": {
              "column": 16,
              "line": 110
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 2,
              "line": 127
            },
            "start": {
              "column": 38,
              "line": 114
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 6,
              "line": 126
            },
            "start": {
              "column": 13,
              "line": 115
            }
          }
        },
        {
          "id": "43",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 63,
              "line": 116
            },
            "start": {
              "column": 26,
              "line": 116
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "location": {
            "end": {
              "column": 10,
              "line": 125
            },
            "start": {
              "column": 65,
              "line": 116
            }
          }
        }
      ],
      "source": "import {\n    AggregateError,\n    GraphQLRequestInfo,\n} from '@dreamit/graphql-server-base'\nimport { buildSchema, GraphQLError, GraphQLSchema } from 'graphql'\n\n// Contains example schemas and data that can be used across tests\n\nexport interface User {\n    userId: string\n    userName: string\n}\n\nexport interface LogoutResult {\n    result: string\n}\n\nexport const initialSchemaWithOnlyDescription = new GraphQLSchema({\n    description: 'initial',\n})\n\nexport const userOne: User = { userId: '1', userName: 'UserOne' }\nexport const userTwo: User = { userId: '2', userName: 'UserTwo' }\n\nexport const userQuery =\n    'query user($id201: String!){ user(id: $id201) { userId userName } }'\nexport const userVariables = '{\"id201\":\"1\"}'\nexport const usersQuery = 'query users{ users { userId userName } }'\nexport const usersQueryWithUnknownField =\n    'query users{ users { userId userName hobby } }'\nexport const returnErrorQuery = 'query returnError{ returnError { userId } }'\nexport const loginMutation =\n    'mutation login{ login(userName:\"magic_man\", password:\"123456\") { jwt } }'\nexport const logoutMutation = 'mutation logout{ logout { result } }'\nexport const introspectionQuery =\n    'query introspection{ __schema { queryType { name } } }'\n\nexport const usersRequest: GraphQLRequestInfo = {\n    operationName: 'users',\n    query: usersQuery,\n}\n\nexport const loginRequest: GraphQLRequestInfo = {\n    operationName: 'login',\n    query: loginMutation,\n}\nexport const usersRequestWithoutOperationName: GraphQLRequestInfo = {\n    query: usersRequest.query,\n}\nexport const usersRequestWithoutVariables: GraphQLRequestInfo = {\n    operationName: usersRequest.operationName,\n    query: usersRequest.query,\n}\n\nexport const userSchema = buildSchema(`\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n  \n  type Query {\n    returnError: User \n    users: [User]\n    user(id: String!): User\n  }\n  \n  type Mutation {\n    login(userName: String, password: String): LoginData\n    logout: LogoutResult\n  }\n  \n  type User {\n    userId: String\n    userName: String\n  }\n  \n  type LoginData {\n    jwt: String\n  }\n  \n  type LogoutResult {\n    result: String\n  }\n`)\n\nexport const userSchemaResolvers = {\n    logout(): LogoutResult {\n        return { result: 'Goodbye!' }\n    },\n    returnError(): User {\n        throw new GraphQLError('Something went wrong!', {})\n    },\n    user(input: { id: string }): User {\n        switch (input.id) {\n            case '1': {\n                return userOne\n            }\n            case '2': {\n                return userTwo\n            }\n            default: {\n                throw new GraphQLError(\n                    `User for userid=${input.id} was not found`,\n                    {},\n                )\n            }\n        }\n    },\n    users(): User[] {\n        return [userOne, userTwo]\n    },\n}\n\nexport const multipleErrorResponse = {\n    errors: [\n        new GraphQLError('The first error!, The second error!', {\n            originalError: {\n                errors: [\n                    new GraphQLError('The first error!', {}),\n                    new GraphQLError('The second error!', {}),\n                ],\n                message: 'The first error!, The second error!',\n                name: 'AggregateError',\n            } as AggregateError,\n        }),\n    ],\n}\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 80,
    "low": 60,
    "break": null
  },
  "testFiles": {
    "tests/example/Dummy.test.ts": {
      "tests": [
        {
          "id": "0",
          "name": "Should use customErrorName instead or error.name if customErrorName is set"
        }
      ],
      "source": "import { expect, test } from 'vitest'\n\ntest('Should use customErrorName instead or error.name if customErrorName is set', () => {\n    expect('123').toBe('123')\n})\n"
    }
  },
  "projectRoot": "C:\\ws_nodejs\\graphql-testing",
  "config": {
    "$schema": "./node_modules/@stryker-mutator/core/schema/stryker-schema.json",
    "_comment": "This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.",
    "packageManager": "npm",
    "reporters": [
      "html",
      "clear-text",
      "progress"
    ],
    "testRunner": "vitest",
    "testRunner_comment": "Take a look at https://stryker-mutator.io/docs/stryker-js/vitest-runner for information about the vitest plugin.",
    "coverageAnalysis": "perTest",
    "buildCommand": "npm run build",
    "ignorers": [
      "log-ignore"
    ],
    "plugins": [
      "@stryker-mutator/*",
      "@sgohlke/stryker-log-ignorer"
    ],
    "logignore": {
      "objectNames": [
        "logger"
      ]
    },
    "ignoreStatic": true,
    "incremental": true,
    "incrementalFile": "stryker-incremental.json",
    "allowConsoleColors": true,
    "checkers": [],
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true,
      "skipFull": false
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignorePatterns": [],
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutate": [
      "{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)",
      "!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"
    ],
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "jsonReporter": {
      "fileName": "reports/mutation/mutation.json"
    },
    "disableTypeChecks": true,
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "thresholds": {
      "high": 80,
      "low": 60,
      "break": null
    },
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "tsconfigFile": "tsconfig.json",
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "vitest": {}
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.7.1",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "typescript": "5.7.2"
    }
  }
}