{
  "files": {
    "src/example/ExampleData.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 24
            },
            "start": {
              "column": 60,
              "line": 22
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 23
            },
            "start": {
              "column": 18,
              "line": 23
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 26
            },
            "start": {
              "column": 23,
              "line": 26
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 26
            },
            "start": {
              "column": 33,
              "line": 26
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 26
            },
            "start": {
              "column": 48,
              "line": 26
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 27
            },
            "start": {
              "column": 23,
              "line": 27
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 36,
              "line": 27
            },
            "start": {
              "column": 33,
              "line": 27
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 57,
              "line": 27
            },
            "start": {
              "column": 48,
              "line": 27
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 96,
              "line": 31
            },
            "start": {
              "column": 29,
              "line": 29
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 34
            },
            "start": {
              "column": 5,
              "line": 34
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 35
            },
            "start": {
              "column": 5,
              "line": 35
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 37
            },
            "start": {
              "column": 5,
              "line": 37
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 76,
              "line": 38
            },
            "start": {
              "column": 5,
              "line": 38
            }
          }
        },
        {
          "id": "13",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 40
            },
            "start": {
              "column": 27,
              "line": 40
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 41
            },
            "start": {
              "column": 32,
              "line": 41
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 56
            },
            "start": {
              "column": 32,
              "line": 43
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 55
            },
            "start": {
              "column": 13,
              "line": 44
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 45
            },
            "start": {
              "column": 26,
              "line": 45
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 54
            },
            "start": {
              "column": 65,
              "line": 45
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 63
            },
            "start": {
              "column": 66,
              "line": 58
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 62
            },
            "start": {
              "column": 17,
              "line": 59
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 60
            },
            "start": {
              "column": 15,
              "line": 60
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 28,
              "line": 61
            },
            "start": {
              "column": 22,
              "line": 61
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 66
            },
            "start": {
              "column": 5,
              "line": 66
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 112,
              "line": 69
            },
            "start": {
              "column": 5,
              "line": 69
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 71
            },
            "start": {
              "column": 5,
              "line": 71
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 72
            },
            "start": {
              "column": 23,
              "line": 72
            }
          }
        },
        {
          "id": "27",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 73
            },
            "start": {
              "column": 20,
              "line": 73
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 75
            },
            "start": {
              "column": 5,
              "line": 75
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 68,
              "line": 76
            },
            "start": {
              "column": 25,
              "line": 76
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 77
            },
            "start": {
              "column": 26,
              "line": 77
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 79,
              "line": 79
            },
            "start": {
              "column": 5,
              "line": 79
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 80
            },
            "start": {
              "column": 24,
              "line": 80
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 83,
              "line": 82
            },
            "start": {
              "column": 5,
              "line": 82
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 84
            },
            "start": {
              "column": 5,
              "line": 84
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 85
            },
            "start": {
              "column": 18,
              "line": 85
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 87
            },
            "start": {
              "column": 5,
              "line": 87
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 92
            },
            "start": {
              "column": 42,
              "line": 89
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 90
            },
            "start": {
              "column": 20,
              "line": 90
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 97
            },
            "start": {
              "column": 42,
              "line": 94
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 27,
              "line": 95
            },
            "start": {
              "column": 20,
              "line": 95
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 100
            },
            "start": {
              "column": 62,
              "line": 98
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 104
            },
            "start": {
              "column": 58,
              "line": 101
            }
          }
        },
        {
          "id": "43",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 146
            },
            "start": {
              "column": 23,
              "line": 109
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 202
            },
            "start": {
              "column": 29,
              "line": 156
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { _service: null } to deeply equal { Object (_service) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 159
            },
            "start": {
              "column": 33,
              "line": 157
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected { _service: { sdl: null } } to deeply equal { Object (_service) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 158
            },
            "start": {
              "column": 16,
              "line": 158
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal 'Variable \\'userName\\' has an invalid …'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 162
            },
            "start": {
              "column": 55,
              "line": 160
            }
          }
        },
        {
          "id": "48",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal 'Request failed ETIMEDOUT connection f…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 165
            },
            "start": {
              "column": 24,
              "line": 163
            }
          }
        },
        {
          "id": "49",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to deeply equal 'Request failed ETIMEDOUT connection f…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 164
            },
            "start": {
              "column": 32,
              "line": 164
            }
          }
        },
        {
          "id": "50",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { login: null } to deeply equal { login: { jwt: 'jwt-' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 173
            },
            "start": {
              "column": 72,
              "line": 166
            }
          }
        },
        {
          "id": "51",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { login: { jwt: '' } } to deeply equal { login: { jwt: 'jwt-' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 167
            },
            "start": {
              "column": 24,
              "line": 167
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { login: null } to deeply equal { login: { jwt: 'jwt-' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 168
            },
            "start": {
              "column": 13,
              "line": 168
            }
          }
        },
        {
          "id": "53",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { login: { jwt: 'jwt-' } } to deeply equal { login: { jwt: 'jwt-MYJWT' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 168
            },
            "start": {
              "column": 13,
              "line": 168
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "LogicalOperator",
          "replacement": "context || context.authHeader",
          "statusReason": "expected { login: null } to deeply equal { login: { jwt: 'jwt-' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 168
            },
            "start": {
              "column": 13,
              "line": 168
            }
          }
        },
        {
          "id": "55",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { login: { jwt: 'jwt-' } } to deeply equal { login: { jwt: 'jwt-MYJWT' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 171
            },
            "start": {
              "column": 44,
              "line": 168
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "AssignmentOperator",
          "replacement": "jwtValue -= context.authHeader",
          "statusReason": "expected { login: { jwt: null } } to deeply equal { login: { jwt: 'jwt-MYJWT' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 169
            },
            "start": {
              "column": 13,
              "line": 169
            }
          }
        },
        {
          "id": "57",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected { login: { jwt: null } } to deeply equal { login: { jwt: 'jwt-' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 172
            },
            "start": {
              "column": 16,
              "line": 172
            }
          }
        },
        {
          "id": "58",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { logout: null } to deeply equal { logout: { result: 'Goodbye!' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 176
            },
            "start": {
              "column": 28,
              "line": 174
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected { logout: { result: null } } to deeply equal { logout: { result: 'Goodbye!' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 175
            },
            "start": {
              "column": 16,
              "line": 175
            }
          }
        },
        {
          "id": "60",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { logout: { result: '' } } to deeply equal { logout: { result: 'Goodbye!' } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 175
            },
            "start": {
              "column": 26,
              "line": 175
            }
          }
        },
        {
          "id": "61",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal 'Something went wrong!'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 179
            },
            "start": {
              "column": 25,
              "line": 177
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to deeply equal 'Something went wrong!'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 178
            },
            "start": {
              "column": 32,
              "line": 178
            }
          }
        },
        {
          "id": "63",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal 'invalid value : invalid value : inval…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 182
            },
            "start": {
              "column": 32,
              "line": 180
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { user: null } to deeply equal { user: { userId: '1', …(1) } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 195
            },
            "start": {
              "column": 39,
              "line": 183
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "ConditionalExpression",
          "replacement": "case '1':",
          "statusReason": "expected { user: { userId: '2', …(1) } } to deeply equal { user: { userId: '1', …(1) } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 186
            },
            "start": {
              "column": 13,
              "line": 185
            }
          }
        },
        {
          "id": "66",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { user: null } to deeply equal { user: { userId: '1', …(1) } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 185
            },
            "start": {
              "column": 18,
              "line": 185
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "ConditionalExpression",
          "replacement": "case '2':",
          "statusReason": "expected { user: null } to deeply equal { user: { userId: '2', …(1) } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 188
            },
            "start": {
              "column": 13,
              "line": 187
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { user: null } to deeply equal { user: { userId: '2', …(1) } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 187
            },
            "start": {
              "column": 18,
              "line": 187
            }
          }
        },
        {
          "id": "69",
          "mutatorName": "ConditionalExpression",
          "replacement": "default:",
          "statusReason": "expected undefined to deeply equal 'User for userid=3 was not found'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 193
            },
            "start": {
              "column": 13,
              "line": 189
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to deeply equal 'User for userid=3 was not found'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 191
            },
            "start": {
              "column": 21,
              "line": 191
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { users: null } to deeply equal { users: [ …(2) ] }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 198
            },
            "start": {
              "column": 21,
              "line": 196
            }
          }
        },
        {
          "id": "72",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected { users: [] } to deeply equal { users: [ …(2) ] }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 197
            },
            "start": {
              "column": 16,
              "line": 197
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal 'Cannot query field \"userId\" on type \"…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 201
            },
            "start": {
              "column": 29,
              "line": 199
            }
          }
        }
      ],
      "source": "import {\n    AggregateError,\n    GraphQLRequestInfo,\n} from '@dreamit/graphql-server-base'\nimport { buildSchema, GraphQLError, GraphQLSchema } from 'graphql'\n\n// Contains example schemas and data that can be used across tests\n\ninterface User {\n    userId: string\n    userName: string\n}\n\ninterface LoginData {\n    jwt: string\n}\n\ninterface LogoutResult {\n    result: string\n}\n\nconst initialSchemaWithOnlyDescription = new GraphQLSchema({\n    description: 'initial',\n})\n\nconst userOne: User = { userId: '1', userName: 'UserOne' }\nconst userTwo: User = { userId: '2', userName: 'UserTwo' }\n\nconst sdlNotFoundResponse = `{\n    \"errors\":[{\"message\":\"Cannot query field \\\\\"_service\\\\\" on type \\\\\"Query\\\\\".\"\n    ,\"locations\":[{\"line\":1,\"column\":30}],\"extensions\":{\"code\":\"GRAPHQL_VALIDATION_FAILED\"}}]}`\n\nconst sensitiveDataInError =\n    'invalid value : invalid value : invalid value : ' +\n    'invalid value : Invalid e-mail address format: xy!yz@myfunnymailer.com'\nconst coercedNullValueError =\n    \"Variable 'userName' has an invalid value: \" +\n    \"Variable 'userName' has coerced Null value for NonNull type 'String!'\"\n\nconst fetchTimeoutError = 'Request failed ETIMEDOUT connection failed'\nconst validationErrorMessage = 'Cannot query field \"userId\" on type \"User\".'\n\nconst aggregateErrorResponse = {\n    errors: [\n        new GraphQLError('The first error!, The second error!', {\n            originalError: {\n                errors: [\n                    new GraphQLError('The first error!', {}),\n                    new GraphQLError('The second error!', {}),\n                ],\n                message: 'The first error!, The second error!',\n                name: 'AggregateError',\n            } as AggregateError,\n        }),\n    ],\n}\n\nconst validationError = new GraphQLError(validationErrorMessage, {\n    extensions: {\n        code: 'GRAPHQL_VALIDATION_FAILED',\n        serviceName: 'user',\n    },\n})\n\nconst aggregateErrorQuery =\n    'query AggregateError { aggregateError { id type } }'\n\nconst coercedNullValueErrorQuery =\n    'mutation CoercedNullValueError { coercedNullValueError(userName:\"magic_man\", password:\"123456\") { jwt } }'\nconst userQuery =\n    'query user($id201: String!){ user(id: $id201) { userId userName } }'\nconst userVariables = '{\"id201\":\"1\"}'\nconst usersQuery = 'query users{ users { userId userName } }'\nconst usersQueryWithUnknownField =\n    'query users{ users { userId userName hobby } }'\nconst fetchErrorQuery = 'query fetchError{ fetchError { userId } }'\nconst returnErrorQuery = 'query returnError{ returnError { userId } }'\nconst loginMutation =\n    'mutation login{ login(userName:\"magic_man\", password:\"123456\") { jwt } }'\nconst logoutMutation = 'mutation logout{ logout { result } }'\nconst introspectionQuery =\n    'query introspection{ __schema { queryType { name } mutationType { name } } }'\nconst sensitiveDataErrorQuery =\n    'query SensitiveDataError { sensitiveDataError { userId } }'\nconst sdlQuery = 'query GetSDL { _service { sdl } }'\nconst validationErrorQuery =\n    'query ValidationError { validationError { userId } }'\n\nconst usersRequest: GraphQLRequestInfo = {\n    operationName: 'users',\n    query: usersQuery,\n}\n\nconst loginRequest: GraphQLRequestInfo = {\n    operationName: 'login',\n    query: loginMutation,\n}\nconst usersRequestWithoutOperationName: GraphQLRequestInfo = {\n    query: usersRequest.query,\n}\nconst usersRequestWithoutVariables: GraphQLRequestInfo = {\n    operationName: usersRequest.operationName,\n    query: usersRequest.query,\n}\n\n/**\n * Example GraphQL schema SDL for a fictional user service.\n */\nconst userSchemaSDL = `schema {\n    query: Query\n    mutation: Mutation\n  }\n  \n  type Query {\n    _service: _Service\n    fetchError: User\n    returnError: User\n    sensitiveDataError: User\n    users: [User]\n    user(id: String!): User\n    validationError: User\n  }\n  \n  type Mutation {\n    coercedNullValueError(userName: String, password: String): LoginData\n    login(userName: String, password: String): LoginData\n    logout: LogoutResult\n  }\n\n  type _Service {\n    sdl: String\n  }\n  \n  type User {\n    userId: String\n    userName: String\n  }\n  \n  type LoginData {\n    jwt: String\n  }\n  \n  type LogoutResult {\n    result: String\n  }\n`\n\n/**\n * Example GraphQL schema for a fictional user service.\n */\nconst userSchema = buildSchema(userSchemaSDL)\n\n/**\n * Schema resolvers for the fictional user service.\n */\nconst userSchemaResolvers = {\n    _service(): { sdl: string } {\n        return { sdl: userSchemaSDL }\n    },\n    coercedNullValueError(_input: unknown): LoginData {\n        throw new GraphQLError(coercedNullValueError, {})\n    },\n    fetchError(): User {\n        throw new GraphQLError('Request failed ETIMEDOUT connection failed', {})\n    },\n    login(input: unknown, context: Record<string, unknown>): LoginData {\n        let jwtValue = 'jwt-'\n        if (context && context.authHeader) {\n            jwtValue += context.authHeader\n            context.jwt = jwtValue\n        }\n        return { jwt: jwtValue }\n    },\n    logout(): LogoutResult {\n        return { result: 'Goodbye!' }\n    },\n    returnError(): User {\n        throw new GraphQLError('Something went wrong!', {})\n    },\n    sensitiveDataError(): User {\n        throw new GraphQLError(sensitiveDataInError, {})\n    },\n    user(input: { id: string }): User {\n        switch (input.id) {\n            case '1':\n                return userOne\n            case '2':\n                return userTwo\n            default:\n                throw new GraphQLError(\n                    `User for userid=${input.id} was not found`,\n                    {},\n                )\n        }\n    },\n    users(): User[] {\n        return [userOne, userTwo]\n    },\n    validationError(): User {\n        throw validationError\n    },\n}\n\nexport {\n    aggregateErrorQuery,\n    aggregateErrorResponse,\n    coercedNullValueError,\n    coercedNullValueErrorQuery,\n    fetchErrorQuery,\n    fetchTimeoutError,\n    initialSchemaWithOnlyDescription,\n    introspectionQuery,\n    LoginData,\n    loginMutation,\n    loginRequest,\n    logoutMutation,\n    LogoutResult,\n    returnErrorQuery,\n    sdlNotFoundResponse,\n    sdlQuery,\n    sensitiveDataErrorQuery,\n    sensitiveDataInError,\n    User,\n    userOne,\n    userQuery,\n    userSchema,\n    userSchemaResolvers,\n    userSchemaSDL,\n    usersQuery,\n    usersQueryWithUnknownField,\n    usersRequest,\n    usersRequestWithoutOperationName,\n    usersRequestWithoutVariables,\n    userTwo,\n    userVariables,\n    validationError,\n    validationErrorMessage,\n    validationErrorQuery,\n}\n"
    },
    "src/logger/NoLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "100",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "22"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 22
            },
            "start": {
              "column": 58,
              "line": 18
            }
          }
        },
        {
          "id": "101",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "22"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 21
            },
            "start": {
              "column": 29,
              "line": 21
            }
          }
        },
        {
          "id": "102",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 47
            },
            "start": {
              "column": 37,
              "line": 47
            }
          }
        },
        {
          "id": "103",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 65,
              "line": 47
            },
            "start": {
              "column": 50,
              "line": 47
            }
          }
        }
      ],
      "source": "/* eslint-disable no-empty-function, no-unused-vars */\nimport { DateFunction } from '@dreamit/funpara'\nimport { Logger } from '@dreamit/graphql-server-base'\n\n/**\n * Logger implementation that does not log or output anything.\n */\nclass NoLogger implements Logger {\n    loggerName: string\n    serviceName: string\n    debugEnabled: boolean\n\n    /**\n     * Creates a new Logger instance.\n     * @param {string} loggerName - The logger name of the logger.\n     * @param {string} serviceName - The service name of the logger.\n     */\n    constructor(loggerName: string, serviceName: string) {\n        this.loggerName = loggerName\n        this.serviceName = serviceName\n        this.debugEnabled = false\n    }\n    debug(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n    error(\n        logMessage: string,\n        error: Error,\n        customErrorName?: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n    info(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n    warn(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n}\n\nconst NoOpTestLogger = new NoLogger('no-logger', 'myTestService')\n\nexport { NoLogger, NoOpTestLogger }\n"
    },
    "src/logger/TextTestLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "104",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'test-logger' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 8
            },
            "start": {
              "column": 18,
              "line": 8
            }
          }
        },
        {
          "id": "105",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'myTestService' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 10
            },
            "start": {
              "column": 19,
              "line": 10
            }
          }
        },
        {
          "id": "106",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "expected 'Stryker was here' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 11
            },
            "start": {
              "column": 28,
              "line": 11
            }
          }
        },
        {
          "id": "107",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "12",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 13
            },
            "start": {
              "column": 32,
              "line": 13
            }
          }
        },
        {
          "id": "108",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 15
            },
            "start": {
              "column": 39,
              "line": 13
            }
          }
        },
        {
          "id": "110",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 1 to be +0 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "11",
            "12"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 22
            },
            "start": {
              "column": 13,
              "line": 22
            }
          }
        },
        {
          "id": "111",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "11",
            "12"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 22
            },
            "start": {
              "column": 13,
              "line": 22
            }
          }
        },
        {
          "id": "128",
          "mutatorName": "OptionalChaining",
          "replacement": "logEntryInput.error.stack",
          "statusReason": "Cannot read properties of undefined (reading 'stack')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 82
            },
            "start": {
              "column": 25,
              "line": 82
            }
          }
        },
        {
          "id": "129",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [ERROR]test-…' to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 82
            },
            "start": {
              "column": 54,
              "line": 82
            }
          }
        },
        {
          "id": "130",
          "mutatorName": "ArithmeticOperator",
          "replacement": "`${logEntry.timestamp} [${logEntry.level.toUpperCase()}]` + `${this.loggerName}-${this.serviceName} :` + logEntry.message - (logEntry.stacktrace ? ` ${logEntry.stacktrace}` : '')",
          "statusReason": "expected NaN to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 89
            },
            "start": {
              "column": 13,
              "line": 86
            }
          }
        },
        {
          "id": "131",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'test-logger-myTestService :test' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 70,
              "line": 86
            },
            "start": {
              "column": 13,
              "line": 86
            }
          }
        },
        {
          "id": "132",
          "mutatorName": "MethodExpression",
          "replacement": "logEntry.level.toLowerCase()",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [info]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 86
            },
            "start": {
              "column": 39,
              "line": 86
            }
          }
        },
        {
          "id": "133",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 87
            },
            "start": {
              "column": 17,
              "line": 87
            }
          }
        },
        {
          "id": "134",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [ERROR]test-…' to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 89
            },
            "start": {
              "column": 40,
              "line": 89
            }
          }
        },
        {
          "id": "135",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 70,
              "line": 89
            },
            "start": {
              "column": 68,
              "line": 89
            }
          }
        },
        {
          "id": "109",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "11",
            "12"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 30
            },
            "start": {
              "column": 13,
              "line": 21
            }
          }
        },
        {
          "id": "112",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "11"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 29
            },
            "start": {
              "column": 32,
              "line": 22
            }
          }
        },
        {
          "id": "114",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z []test-logge…' to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "11"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 27
            },
            "start": {
              "column": 27,
              "line": 27
            }
          }
        },
        {
          "id": "113",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "11"
          ],
          "coveredBy": [
            "11"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 28
            },
            "start": {
              "column": 33,
              "line": 23
            }
          }
        },
        {
          "id": "115",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 47
            },
            "start": {
              "column": 13,
              "line": 38
            }
          }
        },
        {
          "id": "118",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 60
            },
            "start": {
              "column": 13,
              "line": 53
            }
          }
        },
        {
          "id": "116",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 46
            },
            "start": {
              "column": 29,
              "line": 39
            }
          }
        },
        {
          "id": "117",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z []test-logge…' to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "13"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 45
            },
            "start": {
              "column": 23,
              "line": 45
            }
          }
        },
        {
          "id": "119",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 59
            },
            "start": {
              "column": 29,
              "line": 54
            }
          }
        },
        {
          "id": "122",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [WARN]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 72
            },
            "start": {
              "column": 29,
              "line": 67
            }
          }
        },
        {
          "id": "120",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z []test-logge…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "14"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 58
            },
            "start": {
              "column": 23,
              "line": 58
            }
          }
        },
        {
          "id": "123",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z []test-logge…' to be '1001-01-01T00:00:00.000Z [WARN]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 71
            },
            "start": {
              "column": 23,
              "line": 71
            }
          }
        },
        {
          "id": "121",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [WARN]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 73
            },
            "start": {
              "column": 13,
              "line": 66
            }
          }
        },
        {
          "id": "125",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'toUpperCase')",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 84
            },
            "start": {
              "column": 36,
              "line": 76
            }
          }
        },
        {
          "id": "126",
          "mutatorName": "LogicalOperator",
          "replacement": "logEntryInput.loglevel && 'INFO'",
          "statusReason": "Cannot read properties of undefined (reading 'toUpperCase')",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 78
            },
            "start": {
              "column": 20,
              "line": 78
            }
          }
        },
        {
          "id": "124",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "11",
            "13",
            "14",
            "15"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 91
            },
            "start": {
              "column": 56,
              "line": 75
            }
          }
        },
        {
          "id": "127",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z []test-logge…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 78
            },
            "start": {
              "column": 46,
              "line": 78
            }
          }
        }
      ],
      "source": "import { DateFunction, testDateString } from '@dreamit/funpara'\nimport { LogEntry, LogEntryInput, Logger } from '@dreamit/graphql-server-base'\n\n/**\n * Logger implementation that saves created log entries in a string array.\n */\nexport class TextTestLogger implements Logger {\n    loggerName = 'test-logger'\n    debugEnabled: boolean\n    serviceName = 'myTestService'\n    logEntries: string[] = []\n\n    constructor(debugEnabled = false) {\n        this.debugEnabled = debugEnabled\n    }\n\n    debug(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        if (this.debugEnabled) {\n            this.createLogEntry({\n                context,\n                dateFunction,\n                logMessage,\n                loglevel: 'DEBUG',\n            })\n        }\n    }\n\n    error(\n        logMessage: string,\n        error: Error,\n        customErrorName: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.createLogEntry({\n            context,\n            customErrorName,\n            dateFunction,\n            error,\n            logMessage,\n            loglevel: 'ERROR',\n        })\n    }\n\n    info(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.createLogEntry({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: 'INFO',\n        })\n    }\n\n    warn(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.createLogEntry({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: 'WARN',\n        })\n    }\n\n    createLogEntry(logEntryInput: LogEntryInput): void {\n        const logEntry: LogEntry = {\n            errorName: logEntryInput.customErrorName,\n            level: logEntryInput.loglevel ?? 'INFO',\n            logger: this.loggerName,\n            message: logEntryInput.logMessage,\n            serviceName: this.serviceName,\n            stacktrace: logEntryInput.error?.stack ? 'stacktrace' : undefined,\n            timestamp: testDateString,\n        }\n        this.logEntries.push(\n            `${logEntry.timestamp} [${logEntry.level.toUpperCase()}]` +\n                `${this.loggerName}-${this.serviceName} :` +\n                logEntry.message +\n                (logEntry.stacktrace ? ` ${logEntry.stacktrace}` : ''),\n        )\n    }\n}\n"
    },
    "src/request/GenerateGetParametersFromGraphQLRequestInfo.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "136",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 11,
              "line": 10
            }
          }
        },
        {
          "id": "137",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Stryker%20was%20here!query=testQuery&…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 11
            },
            "start": {
              "column": 18,
              "line": 11
            }
          }
        },
        {
          "id": "138",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'query=undefined&operationName=testOpN…' to be 'operationName=testOpName&variables=%2…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "139",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'operationName=testOpName&variables=%2…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 12
            },
            "start": {
              "column": 9,
              "line": 12
            }
          }
        },
        {
          "id": "140",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'operationName=testOpName&variables=%2…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 14
            },
            "start": {
              "column": 28,
              "line": 12
            }
          }
        },
        {
          "id": "141",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'operationName=testOpName&variables=%2…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 13
            },
            "start": {
              "column": 19,
              "line": 13
            }
          }
        },
        {
          "id": "142",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'query=testQuery&operationName=undefin…' to be 'query=testQuery&variables=%22testVars…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "143",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'query=testQuery&variables=%22testVars…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "144",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'query=testQuery&variables=%22testVars…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "19"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 17
            },
            "start": {
              "column": 36,
              "line": 15
            }
          }
        },
        {
          "id": "145",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'query=testQuery&variables=%22testVars…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "19"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 16
            },
            "start": {
              "column": 19,
              "line": 16
            }
          }
        },
        {
          "id": "146",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 18
            },
            "start": {
              "column": 9,
              "line": 18
            }
          }
        },
        {
          "id": "147",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 18
            },
            "start": {
              "column": 9,
              "line": 18
            }
          }
        },
        {
          "id": "148",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 20
            },
            "start": {
              "column": 32,
              "line": 18
            }
          }
        },
        {
          "id": "149",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 19
            },
            "start": {
              "column": 19,
              "line": 19
            }
          }
        },
        {
          "id": "150",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 21
            },
            "start": {
              "column": 9,
              "line": 21
            }
          }
        },
        {
          "id": "151",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 21
            },
            "start": {
              "column": 9,
              "line": 21
            }
          }
        },
        {
          "id": "152",
          "mutatorName": "MethodExpression",
          "replacement": "result.startsWith('&')",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 21
            },
            "start": {
              "column": 9,
              "line": 21
            }
          }
        },
        {
          "id": "153",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "17",
            "18",
            "19"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 21
            },
            "start": {
              "column": 25,
              "line": 21
            }
          }
        },
        {
          "id": "154",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 23
            },
            "start": {
              "column": 31,
              "line": 21
            }
          }
        },
        {
          "id": "155",
          "mutatorName": "MethodExpression",
          "replacement": "result",
          "statusReason": "expected 'query=testQuery&operationName=testOpN…' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 22
            },
            "start": {
              "column": 18,
              "line": 22
            }
          }
        },
        {
          "id": "156",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected 'q' to be 'query=testQuery&operationName=testOpN…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 22
            },
            "start": {
              "column": 34,
              "line": 22
            }
          }
        }
      ],
      "source": "import { GraphQLRequestInfo } from '@dreamit/graphql-server-base'\n\n/**\n * Generates a URL param string with the query, operationName and variables of a GraphQLRequestInfo object.\n * @param {GraphQLRequestInfo} requestInfo - The GraphQL request info object.\n * @returns {string} A string with the query, operationName and variables of a GraphQL request info object.\n */\nexport function generateGetParametersFromGraphQLRequestInfo(\n    requestInfo: GraphQLRequestInfo,\n): string {\n    let result = ''\n    if (requestInfo.query) {\n        result += `query=${requestInfo.query}&`\n    }\n    if (requestInfo.operationName) {\n        result += `operationName=${requestInfo.operationName}&`\n    }\n    if (requestInfo.variables) {\n        result += `variables=${JSON.stringify(requestInfo.variables)}`\n    }\n    if (result.endsWith('&')) {\n        result = result.slice(0, -1)\n    }\n    return encodeURI(result)\n}\n"
    },
    "src/request/JsonContentTypeHeader.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "157",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 8
            },
            "start": {
              "column": 59,
              "line": 6
            }
          }
        },
        {
          "id": "158",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 7
            },
            "start": {
              "column": 21,
              "line": 7
            }
          }
        }
      ],
      "source": "import { IncomingHttpHeaders } from 'node:http'\n\n/**\n * The IncomingHttpHeaders for JSON content type\n */\nexport const JsonContentTypeHeader: IncomingHttpHeaders = {\n    'content-type': 'application/json',\n}\n"
    },
    "src/request/RequestForQuery.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "159",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal { …(4) }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "1",
            "20",
            "21"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 25,
              "line": 14
            }
          }
        },
        {
          "id": "160",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected {} to strictly equal { …(4) }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "1",
            "20",
            "21"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 20
            },
            "start": {
              "column": 12,
              "line": 15
            }
          }
        },
        {
          "id": "161",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected { body: '', headers: { …(1) }, …(2) } to strictly equal { …(4) }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "1",
            "20",
            "21"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 16
            },
            "start": {
              "column": 15,
              "line": 16
            }
          }
        },
        {
          "id": "162",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { …(4) } to strictly equal { …(4) }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "1",
            "20",
            "21"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 18
            },
            "start": {
              "column": 17,
              "line": 18
            }
          }
        },
        {
          "id": "163",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { …(4) } to strictly equal { …(4) }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "20"
          ],
          "coveredBy": [
            "1",
            "20",
            "21"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 19
            },
            "start": {
              "column": 14,
              "line": 19
            }
          }
        }
      ],
      "source": "import { GraphQLServerRequest } from '@dreamit/graphql-server-base'\nimport { IncomingHttpHeaders } from 'node:http'\nimport { JsonContentTypeHeader } from './JsonContentTypeHeader'\n\n/**\n * Creates a GraphQLServerRequest for given query and headers.\n * @param {string} query - The GraphQL query.\n * @param {IncomingHttpHeaders} headers - The HTTPHeaders.\n * @returns {GraphQLServerRequest} A GraphQLServerRequest.\n */\nexport function requestForQuery(\n    query: string,\n    headers: IncomingHttpHeaders = JsonContentTypeHeader,\n): GraphQLServerRequest {\n    return {\n        body: `{\"query\":\"${query}\"}`,\n        headers: headers,\n        method: 'POST',\n        url: '/graphql',\n    }\n}\n"
    },
    "src/response/StandaloneGraphQLServerResponse.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "164",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "expected [ 'Stryker was here' ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 14
            },
            "start": {
              "column": 28,
              "line": 14
            }
          }
        },
        {
          "id": "165",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'application/json' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 21
            },
            "start": {
              "column": 79,
              "line": 18
            }
          }
        },
        {
          "id": "166",
          "mutatorName": "MethodExpression",
          "replacement": "name.toLocaleUpperCase()",
          "statusReason": "expected undefined to be 'application/json' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 19
            },
            "start": {
              "column": 26,
              "line": 19
            }
          }
        },
        {
          "id": "167",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 25
            },
            "start": {
              "column": 31,
              "line": 22
            }
          }
        },
        {
          "id": "168",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'application/json' to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 28
            },
            "start": {
              "column": 38,
              "line": 26
            }
          }
        },
        {
          "id": "169",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 42
            },
            "start": {
              "column": 31,
              "line": 34
            }
          }
        },
        {
          "id": "170",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 35
            },
            "start": {
              "column": 44,
              "line": 35
            }
          }
        },
        {
          "id": "171",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 36
            }
          }
        },
        {
          "id": "172",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '{\"type\":\"Buffer\",\"data\":[72,101,108,1…' to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 36
            }
          }
        },
        {
          "id": "173",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '{\"type\":\"Buffer\",\"data\":[72,101,108,1…' to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 38
            },
            "start": {
              "column": 45,
              "line": 36
            }
          }
        },
        {
          "id": "174",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { …(4) } to be '{\"body\":\"{\\\"query\\\":\\\"query user($id2…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 38
            },
            "start": {
              "column": 20,
              "line": 38
            }
          }
        },
        {
          "id": "175",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\"Hello, World!\"' to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 38
            },
            "start": {
              "column": 20,
              "line": 38
            }
          }
        },
        {
          "id": "176",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof response !== 'string'",
          "statusReason": "expected '\"Hello, World!\"' to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 38
            },
            "start": {
              "column": 20,
              "line": 38
            }
          }
        },
        {
          "id": "177",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\"Hello, World!\"' to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 38
            },
            "start": {
              "column": 40,
              "line": 38
            }
          }
        },
        {
          "id": "178",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\"Hello, World!\"' to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 40
            },
            "start": {
              "column": 50,
              "line": 38
            }
          }
        },
        {
          "id": "179",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected undefined to be 'AValue' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 50
            },
            "start": {
              "column": 49,
              "line": 50
            }
          }
        },
        {
          "id": "180",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 68
            },
            "start": {
              "column": 60,
              "line": 50
            }
          }
        },
        {
          "id": "181",
          "mutatorName": "UnaryOperator",
          "replacement": "+1",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 51
            },
            "start": {
              "column": 44,
              "line": 51
            }
          }
        },
        {
          "id": "182",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { AKey: 'AValue' } to be '{\"AKey\":\"AValue\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 52
            },
            "start": {
              "column": 13,
              "line": 52
            }
          }
        },
        {
          "id": "183",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'AValue' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 52
            },
            "start": {
              "column": 13,
              "line": 52
            }
          }
        },
        {
          "id": "184",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof response === 'string' || parseStringToJSON",
          "statusReason": "expected { AKey: 'AValue' } to be '{\"AKey\":\"AValue\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 52
            },
            "start": {
              "column": 13,
              "line": 52
            }
          }
        },
        {
          "id": "185",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected Buffer[ 72, 101, 108, 108, 111, …(-30) ] to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 52
            },
            "start": {
              "column": 13,
              "line": 52
            }
          }
        },
        {
          "id": "186",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof response !== 'string'",
          "statusReason": "expected undefined to be 'AValue' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 52
            },
            "start": {
              "column": 13,
              "line": 52
            }
          }
        },
        {
          "id": "187",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be 'AValue' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 52
            },
            "start": {
              "column": 33,
              "line": 52
            }
          }
        },
        {
          "id": "188",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 58
            },
            "start": {
              "column": 64,
              "line": 52
            }
          }
        },
        {
          "id": "189",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 55
            },
            "start": {
              "column": 17,
              "line": 53
            }
          }
        },
        {
          "id": "190",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 57
            },
            "start": {
              "column": 21,
              "line": 55
            }
          }
        },
        {
          "id": "191",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 58
            },
            "start": {
              "column": 20,
              "line": 58
            }
          }
        },
        {
          "id": "192",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected Buffer[ 72, 101, 108, 108, 111, …(-30) ] to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 58
            },
            "start": {
              "column": 20,
              "line": 58
            }
          }
        },
        {
          "id": "193",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 65
            },
            "start": {
              "column": 52,
              "line": 58
            }
          }
        },
        {
          "id": "194",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 62
            },
            "start": {
              "column": 17,
              "line": 60
            }
          }
        },
        {
          "id": "195",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 64
            },
            "start": {
              "column": 21,
              "line": 62
            }
          }
        },
        {
          "id": "196",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Hello, World!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "1"
          ],
          "coveredBy": [
            "1"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 67
            },
            "start": {
              "column": 16,
              "line": 65
            }
          }
        }
      ],
      "source": "import { GraphQLServerResponse } from '@dreamit/graphql-server-base'\n\n/**\n * GraphQLServerResponse implementation that can be used standalone without a webserver\n */\nexport class StandaloneGraphQLServerResponse implements GraphQLServerResponse {\n    statusCode = 400\n    // Response headers are set to lowercase to ease testing\n    headers = new Map<string, string | number | readonly string[]>()\n\n    /**\n     * Set responses in an unknown array\n     */\n    responses: unknown[] = []\n\n    textDecoder: TextDecoder = new TextDecoder()\n\n    setHeader(name: string, value: string | number | readonly string[]): this {\n        this.headers.set(name.toLocaleLowerCase(), value)\n        return this\n    }\n    end(chunk: unknown): this {\n        this.responses.push(chunk)\n        return this\n    }\n    removeHeader(name: string): void {\n        this.headers.delete(name)\n    }\n\n    /**\n     * Returns the last response as a string\n     * @returns {string} The last response as a string\n     */\n    getLastResponse(): string {\n        const response = this.responses.at(-1)\n        if (response instanceof Uint8Array) {\n            return this.textDecoder.decode(response)\n        } else if (typeof response === 'string') {\n            return response\n        }\n        return JSON.stringify(response)\n    }\n\n    /**\n     * Returns the last response as an object\n     * @param {boolean} parseStringToJSON - Whether to parse a string response to JSON. If it is parseable, it will be parsed to an object, otherwise it will be returned as a string.\n     * @returns {string} The last response as a string\n     */\n    // eslint-disable-next-line no-explicit-any\n    getLastResponseAsObject(parseStringToJSON = true): any {\n        const response = this.responses.at(-1)\n        if (typeof response === 'string' && parseStringToJSON) {\n            try {\n                return JSON.parse(response)\n            } catch {\n                return response\n            }\n        } else if (response instanceof Uint8Array) {\n            const decodedResponse = this.textDecoder.decode(response)\n            try {\n                return JSON.parse(decodedResponse)\n            } catch {\n                return decodedResponse\n            }\n        } else {\n            return response\n        }\n    }\n}\n"
    },
    "src/logger/JsonTestLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "79",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4",
            "5"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 30
            },
            "start": {
              "column": 13,
              "line": 21
            }
          }
        },
        {
          "id": "75",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'myTestService' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 10
            },
            "start": {
              "column": 19,
              "line": 10
            }
          }
        },
        {
          "id": "74",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'test-logger' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 8
            },
            "start": {
              "column": 18,
              "line": 8
            }
          }
        },
        {
          "id": "76",
          "mutatorName": "ArrayDeclaration",
          "replacement": "new Array([])",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 11
            },
            "start": {
              "column": 30,
              "line": 11
            }
          }
        },
        {
          "id": "78",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 15
            },
            "start": {
              "column": 39,
              "line": 13
            }
          }
        },
        {
          "id": "77",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "3",
            "5",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 13
            },
            "start": {
              "column": 32,
              "line": 13
            }
          }
        },
        {
          "id": "80",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 1 to be +0 // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 2,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "4",
            "5"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 22
            },
            "start": {
              "column": 13,
              "line": 22
            }
          }
        },
        {
          "id": "81",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4",
            "5"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 22
            },
            "start": {
              "column": 13,
              "line": 22
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 29
            },
            "start": {
              "column": 32,
              "line": 22
            }
          }
        },
        {
          "id": "83",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 28
            },
            "start": {
              "column": 33,
              "line": 23
            }
          }
        },
        {
          "id": "84",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'DEBUG' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "4"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 27
            },
            "start": {
              "column": 27,
              "line": 27
            }
          }
        },
        {
          "id": "86",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'INFO' to be 'ERROR' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 46
            },
            "start": {
              "column": 29,
              "line": 39
            }
          }
        },
        {
          "id": "85",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'ERROR' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 47
            },
            "start": {
              "column": 13,
              "line": 38
            }
          }
        },
        {
          "id": "87",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'ERROR' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 45
            },
            "start": {
              "column": 23,
              "line": 45
            }
          }
        },
        {
          "id": "88",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'INFO' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 60
            },
            "start": {
              "column": 13,
              "line": 53
            }
          }
        },
        {
          "id": "89",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'info' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 59
            },
            "start": {
              "column": 29,
              "line": 54
            }
          }
        },
        {
          "id": "90",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'INFO' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 58
            },
            "start": {
              "column": 23,
              "line": 58
            }
          }
        },
        {
          "id": "91",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'WARN' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 73
            },
            "start": {
              "column": 13,
              "line": 66
            }
          }
        },
        {
          "id": "92",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'INFO' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 72
            },
            "start": {
              "column": 29,
              "line": 67
            }
          }
        },
        {
          "id": "93",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 71
            },
            "start": {
              "column": 23,
              "line": 71
            }
          }
        },
        {
          "id": "94",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3",
            "4",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 86
            },
            "start": {
              "column": 56,
              "line": 75
            }
          }
        },
        {
          "id": "95",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3",
            "4",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 84
            },
            "start": {
              "column": 36,
              "line": 76
            }
          }
        },
        {
          "id": "97",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'INFO' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 78
            },
            "start": {
              "column": 46,
              "line": 78
            }
          }
        },
        {
          "id": "96",
          "mutatorName": "LogicalOperator",
          "replacement": "logEntryInput.loglevel && 'INFO'",
          "statusReason": "expected undefined to be 'INFO' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3",
            "4",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 78
            },
            "start": {
              "column": 20,
              "line": 78
            }
          }
        },
        {
          "id": "98",
          "mutatorName": "OptionalChaining",
          "replacement": "logEntryInput.error.stack",
          "statusReason": "Cannot read properties of undefined (reading 'stack')",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "3",
            "4",
            "6",
            "7",
            "8"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 82
            },
            "start": {
              "column": 25,
              "line": 82
            }
          }
        },
        {
          "id": "99",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'stacktrace' // Object.is equality",
          "status": "Killed",
          "static": false,
          "testsCompleted": 1,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 82
            },
            "start": {
              "column": 54,
              "line": 82
            }
          }
        }
      ],
      "source": "import { DateFunction, testDateString } from '@dreamit/funpara'\nimport { LogEntry, LogEntryInput, Logger } from '@dreamit/graphql-server-base'\n\n/**\n * Logger implementation that saves created log entries in an LogEntry array.\n */\nexport class JsonTestLogger implements Logger {\n    loggerName = 'test-logger'\n    debugEnabled: boolean\n    serviceName = 'myTestService'\n    logEntries: LogEntry[] = new Array<LogEntry>()\n\n    constructor(debugEnabled = false) {\n        this.debugEnabled = debugEnabled\n    }\n\n    debug(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        if (this.debugEnabled) {\n            this.createLogEntry({\n                context,\n                dateFunction,\n                logMessage,\n                loglevel: 'DEBUG',\n            })\n        }\n    }\n\n    error(\n        logMessage: string,\n        error: Error,\n        customErrorName: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.createLogEntry({\n            context,\n            customErrorName,\n            dateFunction,\n            error,\n            logMessage,\n            loglevel: 'ERROR',\n        })\n    }\n\n    info(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.createLogEntry({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: 'INFO',\n        })\n    }\n\n    warn(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.createLogEntry({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: 'WARN',\n        })\n    }\n\n    createLogEntry(logEntryInput: LogEntryInput): void {\n        const logEntry: LogEntry = {\n            errorName: logEntryInput.customErrorName,\n            level: logEntryInput.loglevel ?? 'INFO',\n            logger: this.loggerName,\n            message: logEntryInput.logMessage,\n            serviceName: this.serviceName,\n            stacktrace: logEntryInput.error?.stack ? 'stacktrace' : undefined,\n            timestamp: testDateString,\n        }\n        this.logEntries.push(logEntry)\n    }\n}\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 80,
    "low": 60,
    "break": null
  },
  "testFiles": {
    "tests/example/ExampleData.test.ts": {
      "tests": [
        {
          "id": "0",
          "name": "Should be able to execute requests against user test schema"
        }
      ],
      "source": "import { graphql } from 'graphql'\nimport {\n    coercedNullValueError,\n    coercedNullValueErrorQuery,\n    fetchErrorQuery,\n    fetchTimeoutError,\n    loginMutation,\n    logoutMutation,\n    returnErrorQuery,\n    sdlQuery,\n    sensitiveDataErrorQuery,\n    sensitiveDataInError,\n    userOne,\n    userQuery,\n    userSchema,\n    userSchemaResolvers,\n    userSchemaSDL,\n    usersQuery,\n    userTwo,\n    validationErrorMessage,\n    validationErrorQuery,\n} from 'src/example/ExampleData'\nimport { expect, test } from 'vitest'\n\ntest('Should be able to execute requests against user test schema', async () => {\n    // _sdl query\n    let result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: sdlQuery,\n    })\n    expect(result.data).toEqual({ _service: { sdl: userSchemaSDL } })\n\n    // CoercedNullValueError mutation\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: coercedNullValueErrorQuery,\n    })\n    expect(result.errors?.at(0)?.message).toEqual(coercedNullValueError)\n\n    // FetchError mutation\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: fetchErrorQuery,\n    })\n    expect(result.errors?.at(0)?.message).toEqual(fetchTimeoutError)\n\n    // Login mutation without auth context\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: loginMutation,\n    })\n    expect(result.data).toEqual({ login: { jwt: 'jwt-' } })\n\n    // Login mutation with auth context\n    result = await graphql({\n        contextValue: { authHeader: 'MYJWT' },\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: loginMutation,\n    })\n    expect(result.data).toEqual({ login: { jwt: 'jwt-MYJWT' } })\n\n    // Logout mutation\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: logoutMutation,\n    })\n    expect(result.data).toEqual({ logout: { result: 'Goodbye!' } })\n\n    // Return error query\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: returnErrorQuery,\n    })\n    expect(result.errors?.at(0)?.message).toEqual('Something went wrong!')\n\n    // SensitiveDataError query\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: sensitiveDataErrorQuery,\n    })\n    expect(result.errors?.at(0)?.message).toEqual(sensitiveDataInError)\n\n    // User query for user one\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: userQuery,\n        variableValues: { id201: userOne.userId },\n    })\n    expect(result.data).toEqual({ user: userOne })\n\n    // User query for user two\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: userQuery,\n        variableValues: { id201: userTwo.userId },\n    })\n    expect(result.data).toEqual({ user: userTwo })\n\n    // User query for unknown user\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: userQuery,\n        variableValues: { id201: '3' },\n    })\n    expect(result.errors?.at(0)?.message).toEqual(\n        'User for userid=3 was not found',\n    )\n\n    // Users query\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: usersQuery,\n    })\n    expect(result.data).toEqual({ users: [userOne, userTwo] })\n\n    // ValidationErrorQuery\n    result = await graphql({\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        source: validationErrorQuery,\n    })\n    const error = result.errors?.at(0)\n    expect(error?.message).toEqual(validationErrorMessage)\n    expect(error?.extensions).toEqual({\n        code: 'GRAPHQL_VALIDATION_FAILED',\n        serviceName: 'user',\n    })\n})\n"
    },
    "tests/response/StandaloneGraphQLServerResponse.test.ts": {
      "tests": [
        {
          "id": "1",
          "name": "StandaloneGraphQLServerResponse should work as expected"
        }
      ],
      "source": "import {\n    requestForQuery,\n    StandaloneGraphQLServerResponse,\n    userQuery,\n} from 'src'\nimport { expect, test } from 'vitest'\n\nconst exampleText = 'Hello, World!'\nconst exampleJSON = '{\"AKey\":\"AValue\"}'\n\ntest('StandaloneGraphQLServerResponse should work as expected', () => {\n    const response = new StandaloneGraphQLServerResponse()\n    expect(response.statusCode).toBe(400)\n    expect(response.headers).toStrictEqual(\n        new Map<string, string | number | readonly string[]>(),\n    )\n    expect(response.responses).toStrictEqual([])\n\n    // setHeader function\n    response.setHeader('content-type', 'application/json')\n    expect(response.headers.get('content-type')).toBe('application/json')\n\n    // removeHeader function\n    response.removeHeader('content-type')\n    expect(response.headers.get('content-type')).toBeUndefined()\n\n    // getLastResponse function with empty response\n    expect(response.getLastResponse()).toBe(undefined)\n\n    // getLastResponseAsObject function with empty response\n    expect(response.getLastResponseAsObject()).toBeUndefined()\n    expect(response.getLastResponseAsObject(false)).toBeUndefined()\n\n    // Add string to the responses\n    response.end(exampleText)\n    expect(response.getLastResponse()).toBe(exampleText)\n    expect(response.getLastResponseAsObject()).toBe(exampleText)\n    expect(response.getLastResponseAsObject(false)).toBe(exampleText)\n\n    // Add JSON string to the responses\n    response.end(exampleJSON)\n    expect(response.getLastResponse()).toBe(exampleJSON)\n    expect(response.getLastResponseAsObject().AKey).toBe('AValue')\n    expect(response.getLastResponseAsObject(false)).toBe(exampleJSON)\n\n    // Add an object to the responses\n    const userServerRequest = requestForQuery(userQuery)\n    response.end(userServerRequest)\n    expect(response.getLastResponse()).toBe(JSON.stringify(userServerRequest))\n    expect(response.getLastResponseAsObject()).toStrictEqual(userServerRequest)\n    expect(response.getLastResponseAsObject(false)).toStrictEqual(\n        userServerRequest,\n    )\n\n    // Add a Buffer to the responses\n    let buffer = Buffer.from(exampleText, 'utf8')\n    response.end(buffer)\n    expect(response.getLastResponse()).toBe(exampleText)\n    expect(response.getLastResponseAsObject()).toBe(exampleText)\n    expect(response.getLastResponseAsObject(false)).toBe(exampleText)\n\n    // Add a Buffer with JSON content to the responses\n    buffer = Buffer.from(exampleJSON, 'utf8')\n    response.end(buffer)\n    expect(response.getLastResponse()).toBe(exampleJSON)\n    expect(response.getLastResponseAsObject().AKey).toBe('AValue')\n    expect(response.getLastResponseAsObject(false).AKey).toBe('AValue')\n\n    // Add a Uint8Array with a string to the responses\n    const encoder = new TextEncoder()\n    response.end(encoder.encode(exampleText))\n    expect(response.getLastResponse()).toBe(exampleText)\n    expect(response.getLastResponseAsObject()).toBe(exampleText)\n    expect(response.getLastResponseAsObject(false)).toBe(exampleText)\n\n    // Add a Uint8Array with a JSON string to the responses\n    response.end(encoder.encode(exampleJSON))\n    expect(response.getLastResponse()).toBe(exampleJSON)\n    expect(response.getLastResponseAsObject().AKey).toBe('AValue')\n    expect(response.getLastResponseAsObject(false).AKey).toBe('AValue')\n})\n"
    },
    "tests/logger/JsonTestLogger.test.ts": {
      "tests": [
        {
          "id": "2",
          "name": "Creating a Logger should work with default options"
        },
        {
          "id": "3",
          "name": "Logging entry should work even if no loglevel is provided"
        },
        {
          "id": "4",
          "name": "Debug entry should be written if debug is enabled"
        },
        {
          "id": "5",
          "name": "Debug entry should not be written if debug is disabled"
        },
        {
          "id": "6",
          "name": "Error entry should be written"
        },
        {
          "id": "7",
          "name": "Info entry should be written"
        },
        {
          "id": "8",
          "name": "Warn entry should be written"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { testDateFunction } from '@dreamit/funpara'\nimport { JsonTestLogger } from 'src/logger/JsonTestLogger'\nimport { expect, test } from 'vitest'\n\ntest('Creating a Logger should work with default options', () => {\n    const logger = new JsonTestLogger()\n    expect(logger.debugEnabled).toBe(false)\n    expect(logger.loggerName).toBe('test-logger')\n    expect(logger.serviceName).toBe('myTestService')\n})\n\ntest('Logging entry should work even if no loglevel is provided', () => {\n    const logger = new JsonTestLogger()\n    logger.createLogEntry({\n        context: undefined,\n        logMessage: 'test',\n    })\n    const logEntry = logger.logEntries.at(0)\n    expect(logEntry?.message).toBe('test')\n    expect(logEntry?.level).toBe('INFO')\n})\n\ntest('Debug entry should be written if debug is enabled', () => {\n    const debugLogger = new JsonTestLogger(true)\n    debugLogger.debug('test', undefined, testDateFunction)\n    const logEntry = debugLogger.logEntries.at(0)\n    expect(logEntry?.message).toBe('test')\n    expect(logEntry?.level).toBe('DEBUG')\n})\n\ntest('Debug entry should not be written if debug is disabled', () => {\n    const defaultLogger = new JsonTestLogger()\n    defaultLogger.debug('test')\n    expect(defaultLogger.logEntries.length).toBe(0)\n})\n\ntest('Error entry should be written', () => {\n    const defaultLogger = new JsonTestLogger()\n    const testError = new Error('error')\n    testError.stack = 'stacktrace'\n    defaultLogger.error(\n        'error',\n        testError,\n        'custom',\n        undefined,\n        testDateFunction,\n    )\n    const createdLogEntry = defaultLogger.logEntries.at(0)\n    expect(createdLogEntry?.level).toBe('ERROR')\n    expect(createdLogEntry?.message).toBe('error')\n    expect(createdLogEntry?.errorName).toBe('custom')\n    expect(createdLogEntry?.stacktrace).toBe('stacktrace')\n})\n\ntest('Info entry should be written', () => {\n    const defaultLogger = new JsonTestLogger()\n    defaultLogger.info('info', undefined, testDateFunction)\n    const createdLogEntry = defaultLogger.logEntries.at(0)\n    expect(createdLogEntry?.level).toBe('INFO')\n    expect(createdLogEntry?.message).toBe('info')\n})\n\ntest('Warn entry should be written', () => {\n    const defaultLogger = new JsonTestLogger()\n    defaultLogger.warn('warn', undefined, testDateFunction)\n    const createdLogEntry = defaultLogger.logEntries.at(0)\n    expect(createdLogEntry?.level).toBe('WARN')\n    expect(createdLogEntry?.message).toBe('warn')\n})\n"
    },
    "tests/logger/TextTestLogger.test.ts": {
      "tests": [
        {
          "id": "9",
          "name": "Creating a Logger should work with default options"
        },
        {
          "id": "10",
          "name": "Logging entry should work even if no loglevel is provided"
        },
        {
          "id": "11",
          "name": "Debug entry should be written if debug is enabled"
        },
        {
          "id": "12",
          "name": "Debug entry should not be written if debug is disabled"
        },
        {
          "id": "13",
          "name": "Error entry should be written"
        },
        {
          "id": "14",
          "name": "Info entry should be written"
        },
        {
          "id": "15",
          "name": "Warn entry should be written"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { testDateFunction, testDateString } from '@dreamit/funpara'\nimport { TextTestLogger } from 'src/logger/TextTestLogger'\nimport { expect, test } from 'vitest'\n\ntest('Creating a Logger should work with default options', () => {\n    const logger = new TextTestLogger()\n    expect(logger.debugEnabled).toBe(false)\n    expect(logger.loggerName).toBe('test-logger')\n    expect(logger.serviceName).toBe('myTestService')\n})\n\ntest('Logging entry should work even if no loglevel is provided', () => {\n    const logger = new TextTestLogger()\n    logger.createLogEntry({\n        context: undefined,\n        logMessage: 'test',\n    })\n    // Then\n    expect(logger.logEntries.at(0)).toBe(\n        `${testDateString} [INFO]test-logger-myTestService :test`,\n    )\n})\n\ntest('Debug entry should be written if debug is enabled', () => {\n    const debugLogger = new TextTestLogger(true)\n    debugLogger.debug('test', undefined, testDateFunction)\n    expect(debugLogger.logEntries.at(0)).toBe(\n        `${testDateString} [DEBUG]test-logger-myTestService :test`,\n    )\n})\n\ntest('Debug entry should not be written if debug is disabled', () => {\n    const defaultLogger = new TextTestLogger()\n    defaultLogger.debug('test')\n    expect(defaultLogger.logEntries.length).toBe(0)\n})\n\ntest('Error entry should be written', () => {\n    const defaultLogger = new TextTestLogger()\n    const testError = new Error('error')\n    testError.stack = 'stacktrace'\n    defaultLogger.error(\n        'error',\n        testError,\n        'custom',\n        undefined,\n        testDateFunction,\n    )\n    expect(defaultLogger.logEntries.at(0)).toBe(\n        '1001-01-01T00:00:00.000Z [ERROR]test-logger-myTestService :error stacktrace',\n    )\n})\n\ntest('Info entry should be written', () => {\n    const defaultLogger = new TextTestLogger()\n    defaultLogger.info('info', undefined, testDateFunction)\n    expect(defaultLogger.logEntries.at(0)).toBe(\n        '1001-01-01T00:00:00.000Z [INFO]test-logger-myTestService :info',\n    )\n})\n\ntest('Warn entry should be written', () => {\n    const defaultLogger = new TextTestLogger()\n    defaultLogger.warn('warn', undefined, testDateFunction)\n    expect(defaultLogger.logEntries.at(0)).toBe(\n        '1001-01-01T00:00:00.000Z [WARN]test-logger-myTestService :warn',\n    )\n})\n"
    },
    "tests/request/GenerateGetParametersFromGraphQLRequestInfo.test.ts": {
      "tests": [
        {
          "id": "16",
          "name": "For the given query 'testQuery' , operation name 'testOpName' and variables 'testVars' the expected parameters are created 'query=testQuery&operationName=testOpN…'"
        },
        {
          "id": "17",
          "name": "For the given query undefined , operation name 'testOpName' and variables 'testVars' the expected parameters are created 'operationName=testOpName&variables=%2…'"
        },
        {
          "id": "18",
          "name": "For the given query 'testQuery' , operation name undefined and variables 'testVars' the expected parameters are created 'query=testQuery&variables=%22testVars…'"
        },
        {
          "id": "19",
          "name": "For the given query 'testQuery' , operation name 'testOpName' and variables undefined the expected parameters are created 'query=testQuery&operationName=testOpN…'"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { generateGetParametersFromGraphQLRequestInfo } from 'src'\nimport { expect, test } from 'vitest'\n\ntest.each`\n    query          | operationName   | variables     | expectedGetParameters\n    ${'testQuery'} | ${'testOpName'} | ${'testVars'} | ${'query=testQuery&operationName=testOpName&variables=%22testVars%22'}\n    ${undefined}   | ${'testOpName'} | ${'testVars'} | ${'operationName=testOpName&variables=%22testVars%22'}\n    ${'testQuery'} | ${undefined}    | ${'testVars'} | ${'query=testQuery&variables=%22testVars%22'}\n    ${'testQuery'} | ${'testOpName'} | ${undefined}  | ${'query=testQuery&operationName=testOpName'}\n`(\n    'For the given query $query , operation name $operationName and variables $variables the expected parameters are created $expectedGetParameters',\n    ({ query, operationName, variables, expectedGetParameters }) => {\n        expect(\n            generateGetParametersFromGraphQLRequestInfo({\n                operationName: operationName,\n                query: query,\n                variables: variables,\n            }),\n        ).toBe(expectedGetParameters)\n    },\n)\n"
    },
    "tests/request/RequestForQuery.test.ts": {
      "tests": [
        {
          "id": "20",
          "name": "For the given query 'query users{ users { userId userName …' and headers undefined the expected Request object is created with body undefined"
        },
        {
          "id": "21",
          "name": "For the given query 'query users{ users { userId userName …' and headers { 'content-type': 'text/html' } the expected Request object is created with body undefined"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { IncomingHttpHeaders } from 'node:http'\nimport { usersQuery } from 'src/example/ExampleData'\nimport { JsonContentTypeHeader } from 'src/request/JsonContentTypeHeader'\nimport { requestForQuery } from 'src/request/RequestForQuery'\nimport { expect, test } from 'vitest'\n\nconst textContentTypeHeader: IncomingHttpHeaders = {\n    'content-type': 'text/html',\n}\n\ntest.each`\n    query         | headers                  | expectedBody                   | expectedHeaders\n    ${usersQuery} | ${undefined}             | ${`{\"query\":\"${usersQuery}\"}`} | ${JsonContentTypeHeader}\n    ${usersQuery} | ${textContentTypeHeader} | ${`{\"query\":\"${usersQuery}\"}`} | ${textContentTypeHeader}\n`(\n    'For the given query $query and headers $headers the expected Request object is created with body $expectedServerRequest',\n    ({ query, headers, expectedBody, expectedHeaders }) => {\n        expect(requestForQuery(query, headers)).toStrictEqual({\n            body: expectedBody,\n            headers: expectedHeaders,\n            method: 'POST',\n            url: '/graphql',\n        })\n    },\n)\n"
    },
    "tests/logger/NoLogger.test.ts": {
      "tests": [
        {
          "id": "22",
          "name": "Should be able to use NoLogger without running into errors"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { NoLogger } from 'src/logger/NoLogger'\nimport { expect, test } from 'vitest'\n\ntest('Should be able to use NoLogger without running into errors', () => {\n    const logger = new NoLogger('no-logger', 'no-service')\n    expect(logger.debugEnabled).toBe(false)\n    const testMessage = 'Test message'\n\n    // Then\n    expect(() => logger.debug(testMessage)).not.toThrowError()\n    expect(() =>\n        logger.error(testMessage, new Error(testMessage)),\n    ).not.toThrowError()\n    expect(() => logger.info(testMessage)).not.toThrowError()\n    expect(() => logger.warn(testMessage)).not.toThrowError()\n})\n"
    },
    "tests/logger/NoConsole.test.ts": {
      "tests": [
        {
          "id": "23",
          "name": "Using NoConsole log should not throw an error"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { NoConsole } from 'src'\nimport { expect, test } from 'vitest'\n\ntest('Using NoConsole log should not throw an error', () => {\n    expect(() => NoConsole.log('123')).not.toThrowError()\n})\n"
    }
  },
  "projectRoot": "C:\\ws_nodejs\\graphql-testing",
  "config": {
    "$schema": "./node_modules/@stryker-mutator/core/schema/stryker-schema.json",
    "_comment": "This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.",
    "packageManager": "npm",
    "reporters": [
      "html",
      "clear-text",
      "progress"
    ],
    "testRunner": "vitest",
    "testRunner_comment": "Take a look at https://stryker-mutator.io/docs/stryker-js/vitest-runner for information about the vitest plugin.",
    "coverageAnalysis": "perTest",
    "buildCommand": "npm run build",
    "ignorers": [
      "log-ignore"
    ],
    "plugins": [
      "@stryker-mutator/*",
      "@sgohlke/stryker-log-ignorer"
    ],
    "logignore": {
      "objectNames": [
        "logger"
      ]
    },
    "ignoreStatic": true,
    "incremental": true,
    "incrementalFile": "stryker-incremental.json",
    "allowConsoleColors": true,
    "checkers": [],
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true,
      "skipFull": false
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignorePatterns": [],
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutate": [
      "{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)",
      "!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"
    ],
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "jsonReporter": {
      "fileName": "reports/mutation/mutation.json"
    },
    "disableTypeChecks": true,
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "thresholds": {
      "high": 80,
      "low": 60,
      "break": null
    },
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "tsconfigFile": "tsconfig.json",
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "vitest": {}
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.7.1",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "typescript": "5.8.3"
    }
  }
}